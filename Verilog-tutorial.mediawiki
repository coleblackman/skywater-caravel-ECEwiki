=Verilog Tutorial=
Applies to Verilog 2001

==Introduction==

Verilog is a hardware description language (HDL). This means the code you write in a language like Verilog specifies the layout of a piece of hardware (think of circuits), as opposed to code written in a programming language, which executes on your computer. Before HDLs, circuit diagrams were used for this purpose. 
Usage includes writing descriptive code (at RTL) for Field Programmable Gate Arrays (FPGAs), Application Specific Integrated Circuits (ASICs), and discrete logic units, among others.

Verilog is weakly typed (as opposed to another HDL, VHDL, which is strongly typed), though there is nuance to the typing. Other core language features are similar to C, which is helpful. For instance, precedence is equivalent to C, and the language has a preprocessor. Fluency in C is helpful both for this reason and because testbenches/harnesses are written in C. It would prove difficult to write meaningful Verilog code without knowledge of C.

The process of using Verilog to write FPGA or ASIC RTL hardware descriptions is typically as follows:

# Writing Verilog
# Simulating (optional)
# Synthesizing/compiling

==Writing Verilog== 

===Concurrency===

One of the key differences between typical programming languages and Verilog is the idea of concurrency. 

Note: concurrency here is not meant in the sense of ''parallelization'', as you may be familiar with in other languages. Verilog supports parallel processes through fork blocks, but even without their usage, Verilog has inherently concurrent data processes. This is called ''datastream'' programming, as distinct from procedural programming.

Once all code semantics are ''unrolled'' and the Verilog code has been synthesized into hardware specification, hardware is concurrent and static. This is an important concept in understanding and applying the ''blocking'' and ''non-blocking'' operators because it means that Verilog code can "execute" truly concurrently.

===Operators===

Many of the operators in Verilog will be familiar to anyone with C experience. For instance, '+', '-', '==', and '!=' correspond to unary addition, unary subtraction, logical equality, and logical inequality, respectively. Verilog has operators to deal with differing 'functional groups,' such as the bitwise operator, relational operator, and logical operator groups. 


* Blocking assignment operator
* Non-blocking assignment operator

====Bitwise Operators====

See https://class.ece.uw.edu/cadta/verilog/operators.html for a list of all operators in Verilog. 

Bitwise operators work on a bit level rather than a data level. 

===Variable Representation in Verilog===


====Wires====

A ''wire'' is a bus which can transmit information (combinational logic).

From https://inst.eecs.berkeley.edu/~cs150/Documents/Nets.pdf:

# Wire elements are used to connect input and output ports of a module instantiation together with
some other element in your design.
# Wire elements are used as inputs and outputs within an actual module declaration.
# Wire elements must be driven by something, and cannot store a value without being driven.
# Wire elements cannot be used as the left-hand side of an = or <= sign in an always@ block.
# Wire elements are the only legal type on the left-hand side of an assign statement.
# Wire elements are a stateless way of connecting two peices in a Verilog-based design.
# Wire elements can only be used to model combinational logic.

====Regs====

A ''reg'' is the closest thing to a C-like variable in Verilog. Note that it is not equivalent to a "register." 

====Ports====

===Sensitivity List===

===Blocks===

====Generate====

===Recommended Reading===

This tutorial adapts information from the following sources:

IEEE Standard VerilogÂ® Hardware Description Language (IEEE, 2001)

Verilog by Example (Blaine Readler)

https://en.wikipedia.org/wiki/Verilog

Wire vs. Reg

https://inst.eecs.berkeley.edu/~cs150/Documents/Nets.pdf

===Sample Code Block in Verilog===

The below code sample is a modified version of the simple in-and-out program found in Verilog By Example, but as this is essentially the most minimal Verilog code sample, there are many very similar to it.

<code>

module in_and_out ( 
    in_1, in_2, in_3,
    out_1, out_2
    );
    input   in_1;
    input   in_2;
    input   in_3;
    
    output  out_1;
    output  out_2;
    
    wire    intermediate_signal;
    
    assign intermediate_signal = in_1 & in_2;
    
    assign out_1 = intermediate_signal & in_3;
    assign out_2 = intermediate_signal | in_3;
    
endmodule
</code>

This sample should be fairly self-explanatory if you have read the operator list. Look at this syntax closely. It is not C syntax, but it is inspired by C. A good exercise it to try to modify this code to use other operators in some way.
